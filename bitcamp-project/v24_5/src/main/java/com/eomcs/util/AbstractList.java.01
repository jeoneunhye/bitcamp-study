package com.eomcs.util;

public abstract class AbstractList<E> implements List<E> {
  protected int size;

  @Override
  public int size() {
    return size;
  }

  // 로컬 클래스 -> 익명 클래스
  // 인스턴스를 한 개만 생성할 거면 익명 클래스로 정의하라.
  @Override
  public Iterator<E> iterator() {
    // Iterator 객체 obj 생성과 동시에 구현
    // 클래스를 만들고 implements Iterator할 것 없이
    // 바로 인터페이스를 구현할 수 있다.
    Iterator<E> obj =
    new Iterator<E>() {
      // 이 형태는 수퍼 클래스 or 오브젝트의 기본 생성자를 호출한 인터페이스 둘 중 하나다.
      // 인스턴스를 바로 받기 때문에 바깥 클래스의 타입 파라미터 E를 바로 사용하면 된다.
      
      // class ListIterator<T> implements Iterator<T> {
      List<E> list;
      int cursor;

      // 익명 클래스는 클래스의 이름이 없기 때문에
      // 생성자를 만들 수 없다.
      // 인스턴스 블록에서 인스턴스 필드를 초기화시켜라.
      // 물론 단순히 값을 할당하는 경우에는 인스턴스 블록에 넣지 않고
      // 필드 선언에 바로 할당 연산자 '='를 사용할 수 있다.
      // @SuppressWarnings("unchecked")
      // public ListIterator()
      {
        this.list = AbstractList.this;
      }

      // 인터페이스에서 정의한 메서드 구현
      @Override
      public boolean hasNext() {
        return cursor < this.list.size();
      }

      @Override
      public E next() {
        return list.get(cursor++);
      }
    };

    // return new ListIterator<E>();
    return obj;
  }
}