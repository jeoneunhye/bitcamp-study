package com.eomcs.lms;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Scanner;
import com.eomcs.lms.domain.Board;
import com.eomcs.lms.domain.Lesson;
import com.eomcs.lms.domain.Member;
import com.eomcs.lms.handler.BoardAddCommand;
import com.eomcs.lms.handler.BoardDeleteCommand;
import com.eomcs.lms.handler.BoardDetailCommand;
import com.eomcs.lms.handler.BoardListCommand;
import com.eomcs.lms.handler.BoardUpdateCommand;
import com.eomcs.lms.handler.Command;
import com.eomcs.lms.handler.ComputePlusCommand;
import com.eomcs.lms.handler.HelloCommand;
import com.eomcs.lms.handler.LessonAddCommand;
import com.eomcs.lms.handler.LessonDeleteCommand;
import com.eomcs.lms.handler.LessonDetailCommand;
import com.eomcs.lms.handler.LessonListCommand;
import com.eomcs.lms.handler.LessonUpdateCommand;
import com.eomcs.lms.handler.MemberAddCommand;
import com.eomcs.lms.handler.MemberDeleteCommand;
import com.eomcs.lms.handler.MemberDetailCommand;
import com.eomcs.lms.handler.MemberListCommand;
import com.eomcs.lms.handler.MemberUpdateCommand;
import com.eomcs.util.Prompt;
import com.google.gson.Gson;

public class App {
  static Scanner keyboard = new Scanner(System.in);
  static Deque<String> commandStack = new ArrayDeque<>();
  static Queue<String> commandQueue = new LinkedList<>();

  static ArrayList<Lesson> lessonList = new ArrayList<>();
  static LinkedList<Member> memberList = new LinkedList<>();
  static LinkedList<Board> boardList = new LinkedList<>();

  public static void main(String[] args) {
    // 파일에서 데이터 로딩
    loadLessonData();
    loadMemberData();
    loadBoardData();

    Prompt prompt = new Prompt(keyboard);

    Map<String, Command> commandMap = new HashMap<>();

    commandMap.put("/lesson/add", new LessonAddCommand(prompt, lessonList));
    commandMap.put("/lesson/list", new LessonListCommand(lessonList));
    commandMap.put("/lesson/detail", new LessonDetailCommand(prompt, lessonList));
    commandMap.put("/lesson/update", new LessonUpdateCommand(prompt, lessonList));
    commandMap.put("/lesson/delete", new LessonDeleteCommand(prompt, lessonList));

    commandMap.put("/member/add", new MemberAddCommand(prompt, memberList));
    commandMap.put("/member/list", new MemberListCommand(memberList));
    commandMap.put("/member/detail", new MemberDetailCommand(prompt, memberList));
    commandMap.put("/member/update", new MemberUpdateCommand(prompt, memberList));
    commandMap.put("/member/delete", new MemberDeleteCommand(prompt, memberList));

    commandMap.put("/board/add", new BoardAddCommand(prompt, boardList));
    commandMap.put("/board/list", new BoardListCommand(boardList));
    commandMap.put("/board/detail", new BoardDetailCommand(prompt, boardList));
    commandMap.put("/board/update", new BoardUpdateCommand(prompt, boardList));
    commandMap.put("/board/delete", new BoardDeleteCommand(prompt, boardList));

    commandMap.put("/hello", new HelloCommand(prompt));
    commandMap.put("/compute/plus", new ComputePlusCommand(prompt));

    String command;

    while (true) {
      System.out.print("\n명령> ");
      command = keyboard.nextLine();

      if (command.length() == 0)
        continue;

      if (command.equals("quit")) {
        System.out.println("안녕!");
        break;

      } else if (command.equals("history")) {
        printCommandHistory(commandStack.iterator());
        continue;

      } else if (command.equals("history2")) {
        printCommandHistory(commandQueue.iterator());
        continue;
      }

      commandStack.push(command);
      commandQueue.offer(command);

      Command commandHandler = commandMap.get(command);
      if (commandHandler != null) {
        try {
          commandHandler.execute();

        } catch (Exception e) {
          System.out.printf("명령어 실행 중 오류 발생: %s\n", e.getMessage());
        }

      } else {
        System.out.println("실행할 수 없는 명령입니다.");
      }
    }

    keyboard.close();

    // 데이터를 파일에 저장
    saveLessonData();
    saveMemberData();
    saveBoardData();
  }

  private static void printCommandHistory(Iterator<String> iterator) {
    int count = 0;

    while (iterator.hasNext()) {
      System.out.println(iterator.next());
      count++;

      if (count % 5 == 0) {
        System.out.print(":");
        String str = keyboard.nextLine();
        if (str.equalsIgnoreCase("q"))
          break;
      }
    }
  }

  // csv -> json파일을 다루도록 변경
  private static void loadLessonData() {
    File file = new File("./lesson.json");

    FileReader in = null;
    // Scanner dataScan = null;

    try {
      in = new FileReader(file);
      // dataScan = new Scanner(in);
      // 파일의 데이터를 한 줄씩 읽어올 필요가 없기 때문에 Scanner를 삭제한다.

      // int count = 0;

      /*
      while (true) {
        try {
          String line = dataScan.nextLine();

          lessonList.add(Lesson.valueOf(line));
          count++;

        } catch (Exception e) {
          break;
        }
      }
       */

      Lesson[] lessons = new Gson().fromJson(in, Lesson[].class);
      // fromJson json파일의 데이터를 Lesson 객체가 담긴 배열의 형태로 만들어 담는다.

      for (Lesson lesson : lessons) { // Lesson 객체가 담긴 배열에서 하나씩 끝까지 꺼내서
        lessonList.add(lesson); // list에 그 객체를 담는다.
      }

      System.out.printf("총 %d개의 수업 데이터를 로딩했습니다.\n", /*count*/lessonList.size());

    } catch (FileNotFoundException e) {
      System.out.println("파일 읽기 중 오류 발생! - " + e.getMessage());

    } finally {
      /*
      try {
        dataScan.close();

      } catch (Exception e) {}
       */

      try {
        in.close();

      } catch (Exception e) {}
    }
  }

  // csv -> json파일을 다루도록 변경
  private static void saveLessonData() {
    File file = new File("./lesson.json");
    FileWriter out = null;

    try {
      out = new FileWriter(file);

      // int count = 0;

      /*
      for (Lesson lesson : lessonList) {
        out.write(lesson.toCsvString());
        count++;
      }
       */

      // 한 줄에 lesson의 값을 계속해서 출력하지 않고 list를 통째로 출력할 수 있다.
      out.write(new Gson().toJson(lessonList));

      System.out.printf("총 %d개의 수업 데이터를 저장했습니다.\n", /*count*/lessonList.size());

    } catch (IOException e) {
      System.out.println("파일 쓰기 중 오류 발생! - " + e.getMessage());

    } finally {
      try {
        out.close();

      } catch (IOException e) {}
    }
  }

  // csv -> json파일을 다루도록 변경
  private static void loadMemberData() {
    File file = new File("./member.json");
    FileReader in = null;
    // Scanner dataScan = null;

    try {
      in = new FileReader(file);
      // dataScan = new Scanner(in);
      // 파일의 데이터를 한 줄씩 읽어올 필요가 없기 때문에 Scanner를 삭제한다.

      // int count = 0;

      /*
      while (true) {
        try {
          String line = dataScan.nextLine();
          memberList.add(Member.valueOf(line));
          count++;

        } catch (Exception e) {
          break;
        }
      }
       */

      Member[] members = new Gson().fromJson(in, Member[].class);
      // fromJson json파일의 데이터를 Member 객체가 담긴 배열의 형태로 만들어 담는다.

      for (Member member : members) { // Member 객체가 담긴 배열에서 하나씩 끝까지 꺼내서
        memberList.add(member); // list에 그 객체를 담는다.
      }

      System.out.printf("총 %d개의 회원 데이터를 로딩했습니다.\n", /*count*/memberList.size());

    } catch (FileNotFoundException e) {
      System.out.println("파일 읽기 중 오류 발생! - " + e.getMessage());

    } finally {
      /*
      try {
        dataScan.close();

      } catch (Exception e) {}
       */

      try {
        in.close();

      } catch (Exception e) {}
    }
  }

  // csv -> json파일을 다루도록 변경
  private static void saveMemberData() {
    File file = new File("./member.json");
    FileWriter out = null;

    try {
      out = new FileWriter(file);

      // int count = 0;

      /*
      for (Member member : memberList) {
        out.write(member.toCsvString());
        count++;
      }
       */

      // 한 줄에 member의 값을 계속해서 출력하지 않고 list를 통째로 출력할 수 있다.
      out.write(new Gson().toJson(memberList));

      System.out.printf("총 %d개의 회원 데이터를 저장했습니다.\n", /*count*/memberList.size());

    } catch (IOException e) {
      System.out.println("파일 쓰기 중 오류 발생! - " + e.getMessage());

    } finally {
      try {
        out.close();

      } catch (IOException e) {}
    }
  }

  // csv -> json파일을 다루도록 변경
  private static void loadBoardData() {
    File file = new File("./board.json");
    FileReader in = null;
    // Scanner dataScan = null;

    try {
      in = new FileReader(file);
      // dataScan = new Scanner(in);
      // 파일의 데이터를 한 줄씩 읽어올 필요가 없기 때문에 Scanner를 삭제한다.

      // int count = 0;

      /*
      while (true) {
        try {
          String line = dataScan.nextLine();
          boardList.add(Board.valueOf(line));
          count++;

        } catch (Exception e) {
          break;
        }
      }
       */

      Board[] boards = new Gson().fromJson(in, Board[].class);
      // fromJson json파일의 데이터를 Board 객체가 담긴 배열의 형태로 만들어 담는다.

      for (Board board : boards) { // Board 객체가 담긴 배열에서 하나씩 끝까지 꺼내서
        boardList.add(board); // list에 그 객체를 담는다
      }

      System.out.printf("총 %d개의 게시물 데이터를 로딩했습니다.\n", /*count*/boardList.size());

    } catch (FileNotFoundException e) {
      System.out.println("파일 읽기 중 오류 발생! - " + e.getMessage());

    } finally {
      /*
      try {
        dataScan.close();

      } catch (Exception e) {}
       */

      try {
        in.close();

      } catch (Exception e) {}
    }
  }

  // csv -> json파일을 다루도록 변경
  private static void saveBoardData() {
    File file = new File("./board.json");
    FileWriter out = null;

    try {
      out = new FileWriter(file);

      // int count = 0;

      /*
      for (Board board : boardList) {
        out.write(board.toCsvString());
        count++;
      }
       */

      // 한 줄에 board의 값을 계속해서 출력하지 않고 list를 통째로 출력할 수 있다.
      out.write(new Gson().toJson(boardList));

      System.out.printf("총 %d개의 게시물 데이터를 저장했습니다.\n", /*count*/boardList.size());

    } catch (IOException e) {
      System.out.println("파일 쓰기 중 오류 발생! - " + e.getMessage());

    } finally {
      try {
        out.close();

      } catch (IOException e) {}
    }
  }
}