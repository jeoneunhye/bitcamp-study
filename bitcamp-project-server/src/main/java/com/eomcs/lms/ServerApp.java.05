// LMS 서버
package com.eomcs.lms;
// "/board/update" 처리
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import com.eomcs.context.ApplicationContextListener;
import com.eomcs.lms.domain.Board;

public class ServerApp {
  Set<ApplicationContextListener> listeners = new HashSet<>();
  Map<String, Object> context = new HashMap<>();

  public void addApplicationContextListener(ApplicationContextListener listener) {
    listeners.add(listener);
  }

  public void removeApplicationContextListener(ApplicationContextListener listener) {
    listeners.remove(listener);
  }

  public void notifyApplicationInitialized() {
    for (ApplicationContextListener listener : listeners) {
      listener.contextInitialized(context);
    }
  }

  public void notifyApplicationDestroyed() {
    for (ApplicationContextListener listener : listeners) {
      listener.contextDestroyed(context);
    }
  }

  public void service() {
    notifyApplicationInitialized();

    try (
        ServerSocket serverSocket = new ServerSocket(9999)) {
      System.out.println("클라이언트 연결 대기중...");

      while (true) {
        Socket socket = serverSocket.accept();
        System.out.println("클라이언트와 연결되었음!");

        if (processRequest(socket) == 9) {
          break; // /server/stop
        }

        System.out.println("-----클라이언트 요청 처리 끝-----");
      }
    } catch (Exception e) {
      System.out.println("서버 준비 중 오류 발생!");
    }

    notifyApplicationDestroyed();
  }

  @SuppressWarnings("unchecked")
  int processRequest(Socket clientSocket) {
    try(
        Socket socket = clientSocket;

        ObjectInputStream in = new ObjectInputStream(socket.getInputStream());

        ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream())
        ) {
      System.out.println("통신을 위한 입출력 스트림을 준비하였음!");

      while (true) {
        String request = in.readUTF();
        System.out.println("클라이언트가 보낸 메시지: " + request);
        System.out.println("클라이언트가 보낸 메시지를 수신하였음!");

        if (request.equals("quit")) {
          out.writeUTF("OK");
          out.flush();
          break;
        }

        if (request.equals("/server/stop")) {
          out.writeUTF("OK");
          out.flush();
          return 9;
        }

        List<Board> boards = (List<Board>) context.get("boardList");

        if (request.equals("/board/list")) {
          out.writeUTF("OK");

          out.reset();

          out.writeObject(boards);
        } else if (request.equals("/board/add")) {
          try {
            Board board = (Board) in.readObject();

            int i = 0;
            for (; i < boards.size(); i++) {
              if (boards.get(i).getNo() == board.getNo()) {
                break;
              }
            }

            if (i == boards.size()) {
              boards.add(board);
              System.out.println("게시물을 저장하였습니다.");

              out.writeUTF("OK");
            } else {
              out.writeUTF("FAIL");
              out.writeUTF("같은 번호의 게시물이 있습니다.");
            }

          } catch (Exception e) {
            out.writeUTF("FAIL");
            out.writeUTF(e.getMessage());
          }
        }
        // BoardUpdateCommand: out.writeUTF("/board/detail");
        else if (request.equals("/board/detail")) {
          try {
            int no = in.readInt(); // BoardDetailCommand: out.writeInt(no);

            Board board = null;
            for (Board b : boards) {
              if (b.getNo() == no) { // board 객체 중에 입력받은 no와 번호가 같다면
                board = b; // 빈 board 객체에 해당 board 값을 넣는다.
                break;
              }
            }

            if (board != null) { // board의 값이 생겼다면(같은 번호를 찾았다면)
              out.writeUTF("OK");
              out.writeObject(board); // board 객체의 값을 통째로 출력한다.

            } else {
              out.writeUTF("FAIL");
              out.writeUTF("해당 번호의 게시물이 없습니다.");
            }

          } catch (Exception e) {
            out.writeUTF("FAIL");
            out.writeUTF(e.getMessage());
          }
        }
        // BoardUpdateCommand: out.writeUTF("/board/update");
        else if (request.equals("/board/update")) {
          try {
            // 클라이언트에서, 변경 처리한 데이터를 받는다.
            Board board = (Board) in.readObject();

            int index = -1;
            for (int i = 0; i < boards.size(); i++) {
              if (boards.get(i).getNo() == board.getNo()) {
                index = i;
                break;
              }
            }

            if (index != -1) { // boards에서 같은 번호를 가진 데이터를 찾았다면
              boards.set(index, board); // index번째 boards -> board로 새로 교체
              out.writeUTF("OK");
            } else {
              out.writeUTF("FAIL");
              out.writeUTF("해당 번호의 게시물이 없습니다.");
            }
            
          } catch (Exception e) {
            out.writeUTF("FAIL");
            out.writeUTF(e.getMessage());
          }
          
        } else {
          out.writeUTF("FAIL");
          out.writeUTF("요청한 명령을 처리하지 못했습니다.");
        }

        out.flush(); // 성공 여부에 상관없이 flush() 호출하기
        // TCP/IP에 패킷이 꽉 차있지 않아도 내보냄

      } // while문 끝
      System.out.println("클라이언트로 메시지를 전송하였음!");
      return 0;

    } catch(Exception e) {
      System.out.print("예외 발생: ");
      e.printStackTrace();
      return -1;
    }
  }

  public static void main(String[] args) {
    System.out.println("서버 수업 관리 시스템입니다.");
    ServerApp app = new ServerApp();
    app.addApplicationContextListener(new DataLoaderListener());
    app.service();
  }
}