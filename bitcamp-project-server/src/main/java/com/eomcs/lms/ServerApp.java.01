// LMS 서버
package com.eomcs.lms;

import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import com.eomcs.context.ApplicationContextListener;

public class ServerApp {
  // 옵저버 관련 코드
  Set<ApplicationContextListener> listeners = new HashSet<>();
  Map<String, Object> context = new HashMap<>();

  public void addApplicationContextListener(ApplicationContextListener listener) {
    listeners.add(listener);
  }

  public void removeApplicationContextListener(ApplicationContextListener listener) {
    listeners.remove(listener);
  }

  public void notifyApplicationInitialized() {
    for (ApplicationContextListener listener : listeners) {
      listener.contextInitialized(context);
    }
  }

  public void notifyApplicationDestroyed() {
    for (ApplicationContextListener listener : listeners) {
      listener.contextDestroyed(context);
    }
  }

  public void service() {
    notifyApplicationInitialized();

    try (
        ServerSocket serverSocket = new ServerSocket(9999)) {
      System.out.println("클라이언트 연결 대기중...");

      while (true) {
        Socket socket = serverSocket.accept();
        // 접속한 순서대로 accept
        System.out.println("클라이언트와 연결되었음!");

        processRequest(socket);

        System.out.println("-----클라이언트 요청 처리 끝-----");
      }
    } catch (Exception e) {
      System.out.println("서버 준비 중 오류 발생!");
      // return;
    }

    // processRequest 작업할 때 꺼내올 것
    // List<Lesson> lessonList = (List<Lesson>) context.get("lessonList");
    // List<Member> memberList = (List<Member>) context.get("memberList");
    // List<Board> boardList = (List<Board>) context.get("boardList");

    notifyApplicationDestroyed();
  }

  /*static*/ void processRequest(Socket clientSocket) {
    try(
        Socket socket = clientSocket;

        Scanner in = new Scanner(socket.getInputStream());

        // PrintStream out = new PrintStream(socket.getOutputStream())
        ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream())
        // 리스트 데이터를 통째로 출력하도록 Decorator 교체
        ) {
      System.out.println("통신을 위한 입출력 스트림을 준비하였음!");

      String request = in.nextLine();
      System.out.println("클라이언트가 보낸 메시지: " + request);
      System.out.println("클라이언트가 보낸 메시지를 수신하였음!");

      // Client의 command가 "/board/list"면
      // command 인터페이스를 구현한 BoardListCommand 구현 객체를 생성하고
      // ClientApp이 BoardListCommand의 execute()를 호출!
      if (request.equals("/board/list")) {
        out.writeUTF("OK");
        out.writeObject(context.get("boardList"));
        // Object 객체를 리턴, boardList를 받아 통째로 출력
      } else {
        out.writeUTF("FAIL");
        System.out.println("요청한 명령을 처리하지 못했습니다.");
      }

      System.out.println("클라이언트로 메시지(OK/FAIL)를 전송하였음!");

    } catch(Exception e) {
      System.out.println("예외 발생:");
      e.printStackTrace();
    }
  }

  public static void main(String[] args) {
    System.out.println("서버 수업 관리 시스템입니다.");
    ServerApp app = new ServerApp();
    app.addApplicationContextListener(new DataLoaderListener());
    app.service();
  }
}