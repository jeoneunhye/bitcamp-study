// LMS 서버
package com.eomcs.lms;

import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import com.eomcs.context.ApplicationContextListener;
import com.eomcs.lms.domain.Board;

public class ServerApp {
  Set<ApplicationContextListener> listeners = new HashSet<>();
  Map<String, Object> context = new HashMap<>();

  public void addApplicationContextListener(ApplicationContextListener listener) {
    listeners.add(listener);
  }

  public void removeApplicationContextListener(ApplicationContextListener listener) {
    listeners.remove(listener);
  }

  public void notifyApplicationInitialized() {
    for (ApplicationContextListener listener : listeners) {
      listener.contextInitialized(context);
    }
  }

  public void notifyApplicationDestroyed() {
    for (ApplicationContextListener listener : listeners) {
      listener.contextDestroyed(context);
    }
  }

  public void service() {
    notifyApplicationInitialized();

    try (
        ServerSocket serverSocket = new ServerSocket(9999)) {
      System.out.println("클라이언트 연결 대기중...");

      while (true) {
        Socket socket = serverSocket.accept();
        System.out.println("클라이언트와 연결되었음!");

        processRequest(socket);

        System.out.println("-----클라이언트 요청 처리 끝-----");
      }
    } catch (Exception e) {
      System.out.println("서버 준비 중 오류 발생!");
    }

    notifyApplicationDestroyed();
  }

  @SuppressWarnings("unchecked")
  void processRequest(Socket clientSocket) {
    try(
        Socket socket = clientSocket;

        // Scanner in = new Scanner(socket.getInputStream());
        ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
        // /board/add할 때 list 객체를 통째로 가져와야 하기 때문에 도구 변경

        ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream())
        ) {
      System.out.println("통신을 위한 입출력 스트림을 준비하였음!");

      while (true) {
        // String request = in.nextLine();
        String request = in.readUTF();
        System.out.println("클라이언트가 보낸 메시지: " + request);
        System.out.println("클라이언트가 보낸 메시지를 수신하였음!");

        // Client: command.equals("quit")이면 out.writeUTF("quit");
        if (request.equals("quit")) {
          out.writeUTF("OK");
          out.flush();
          break;
        }

        // Client의 command가 "quit"이 아니면 Board를 담은 List 객체 생성
        List<Board> boards = (List<Board>) context.get("boardList");

        // BoardListCommand: out.writeUTF("/board/list");
        if (request.equals("/board/list")) {
          out.writeUTF("OK");

          out.reset(); // disregard already written to the stream
          // 기존에 출력했던 List<Board> 객체의 직렬화 데이터를 무시하고
          // 새로 직렬화를 수행한다.
          // reset을 해야만 add한 board 객체가 list에 정상적으로 출력된다.

          // out.writeObject(context.get("boardList"));
          out.writeObject(boards); // List 객체를 받아 통째로 출력

        } else if (request.equals("/board/add")) {
          try {
            Board board = (Board) in.readObject();
            boards.add(board);
            System.out.println("게시물을 저장하였습니다.");

            out.writeUTF("OK");

          } catch (Exception e) {
            out.writeUTF("FAIL");
            out.writeUTF(e.getMessage());
          }

        } else {
          out.writeUTF("FAIL");
          out.writeUTF("요청한 명령을 처리하지 못했습니다.");
        }

        out.flush(); // 성공 여부에 상관없이 flush() 호출하기
        // TCP/IP에 패킷이 꽉 차있지 않아도 내보냄

        System.out.println("클라이언트로 메시지를 전송하였음!");
      } // while문 끝

    } catch(Exception e) {
      System.out.print("예외 발생: ");
      e.printStackTrace();
    }
  }

  public static void main(String[] args) {
    System.out.println("서버 수업 관리 시스템입니다.");
    ServerApp app = new ServerApp();
    app.addApplicationContextListener(new DataLoaderListener());
    app.service();
  }
}