package com.eomcs.util;
// 11. 파라미터로 배열을 받는 toArray(E[])를 추가한다.
import java.lang.reflect.Array;

public class LinkedList<E> {
  Node<E> first;
  Node<E> last;
  int size;

  public void add(E value) {
    Node<E> newNode = new Node();
    newNode.value = value;

    if (first == null) {
      last = first = newNode;
    } else {
      last.next = newNode;
      last = newNode;
    }

    this.size++;
  }

  public E get(int index) {
    if (index < 0 || index >= size) 
      return null; 
    
    Node<E> cursor = first;
    
    for (int i = 0; i < index; i++) {
      cursor = cursor.next;
    }
    return cursor.value;
  }
  
  public void add(int index, E value) { 
    if (index < 0 || index >= size)
      return;
    
    Node<E> newNode = new Node();
    newNode.value = value;

    Node<E> cursor = first;
    for (int i = 0; i < index - 1; i++) {
      cursor = cursor.next;
    }
    
    if (index == 0) {
      newNode.next = first;
      first = newNode;
    } else {
    newNode.next = cursor.next;
    
    cursor.next = newNode;
    }
    
    this.size++;
  }
  
  public E remove(int index) {
    if (index < 0 || index >= size)
      return null;
    
    Node<E> cursor = first;
    for (int i = 0; i < index - 1; i++) {
      cursor = cursor.next;
    }
    
    Node<E> deletedNode = null;
    if (index == 0) {
    deletedNode = first;
    first = deletedNode.next;
    } else {
    deletedNode = cursor.next;
    cursor.next = deletedNode.next;
    }
    
    deletedNode.next = null;
    
    size--;
    
    return deletedNode.value;
  }
  
  public E set(int index, E value) {
    if (index < 0 || index >= size) 
      return null; 
    
    Node<E> cursor = first;
    
    for (int i = 0; i < index; i++) {
      cursor = cursor.next;
    }
    
    E oldValue = cursor.value;
    cursor.value = value;
    
    return oldValue;
  }
  
  public Object[] toArray() {
    Object[] arr = new Object[size]; // 현재 저장된 갯수만큼 배열 생성
    
    Node<E> cursor = first;
    
    for (int i = 0; i < size; i++) {
      arr[i] = cursor.value;
      cursor = cursor.next; // 커서를 현재 커서가 가리키는 다음으로 이동
    }
    
    return arr;
  }
  
  @SuppressWarnings("unchecked")
  public E[] toArray(E[] arr) {
    // Object[] arr = new Object[size];
    
    if (arr.length < size) { // ~면 arr 배열을 사용하지 않고 새로 만들어야 한다.
      arr = (E[]) Array.newInstance(arr.getClass().getComponentType(), size);
          // 배열의 클래스 타입이 아닌 배열을 구성하고있는 getComponentType
    }
    
    Node<E> cursor = first;
    
    for (int i = 0; i < size; i++) {
      arr[i] = cursor.value;
      cursor = cursor.next; // 커서를 현재 커서가 가리키는 다음으로 이동
    }
    
    return arr;
  }
  
  static class Node<T> {
    T value;
    Node<T> next;
  }
}